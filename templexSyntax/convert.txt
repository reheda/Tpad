##### Sku #####

<name>.Brand</name>
<ret>String</ret>
<link>AF67F4DB</link>
<desc>Returns the brand of this product</desc>


<name>.Colors</name>
<ret>IEnumerable`1</ret>
<link>B28D568C</link>
<desc>Gets a list of standardized color names.</desc>
<rem>Use this to test the product color in expressions, but prefer the <code>InvariantColors</code> alternative.</rem>


<name>.Description</name>
<ret>String</ret>
<link>FB0828E6</link>
<desc>Returns our standardized description for this product.</desc>
<rem>This description is unique.</rem>


<name>.FancyColors</name>
<ret>IEnumerable`1</ret>
<link>6A5708B9</link>
<desc>Gets a list of colors as described by the manufacturer.</desc>
<rem>Use this when exporting values describing the product to the consumer (i.e. as part of the product title, or a color description for the user), but not for testing product color or to export raw data to be fed into third party systems.</rem>


<name>.InvariantColors</name>
<ret>IEnumerable`1</ret>
<link>2563A574</link>
<desc>Gets a list of standardized color names, in US English.</desc>
<rem>Use this to test the product color in expressions.</rem>


<name>.ItemName</name>
<ret>String</ret>
<link>7829DEF8</link>
<desc>Returns a concatenation of the product line, model name (without partnumber) and product type for this product.</desc>
<rem>Do <strong>not</strong> use this.</rem>


<name>.Keywords</name>
<ret>IEnumerable`1</ret>
<link>FD820210</link>
<desc>Returns a list of search keywords for this product, including brand, manufacturer, product line, model name and product type.</desc>


<name>.LaunchDate</name>
<ret>DateTime</ret>
<link>2C5B930D</link>
<desc>The estimated launch date of this product.</desc>


<name>.Manufacturer</name>
<ret>String</ret>
<link>90454FAB</link>
<desc>Returns the name of the manufacturer of this product.</desc>
<rem>This is not necessarily the product brand.</rem>


<name>.ModelName</name>
<ret>String</ret>
<link>A54AA30A</link>
<desc>Returns the model name of this product.</desc>


<name>.Name</name>
<ret>String</ret>
<link>2968D007</link>
<desc>Returns our short name for this this product.</desc>
<rem>This product name is minimalistic and not guaranteed to be unique.</rem>


<name>.NonOemAccessories</name>
<ret>Int32</ret>
<link>9C8D490C</link>
<desc>Number of non-oem accessories available for this product.</desc>


<name>.PackQuantity</name>
<ret>Int32</ret>
<link>88CA64E0</link>
<desc>Returns the number of items included in this product's package.</desc>
<rem>This is the minimum number of items that can be bought in the standard retail packaging offered by the manufacturer, it doesn't include retailer or promotional bundler.</rem>


<name>.PartNumber</name>
<ret>String</ret>
<link>9CAB56C8</link>
<desc>Returns the manufacturer's part number for this product.</desc>


<name>.ProductId</name>
<ret>Int32</ret>
<link>DE35A626</link>
<desc>Returns the CNET product id for this product.</desc>


<name>.ProductLine</name>
<ret>String</ret>
<link>E0B6FCE1</link>
<desc>Returns the product line of this product.</desc>


<name>.ProductType</name>
<ret>String</ret>
<link>19BCA3CF</link>
<desc>Returns the product type of this product.</desc>
<rem>A product type is the text that would be used after a determiner, i.e. this is a *Notebook*. This is not the same as the category name, which is never in singularform.</rem>


##### SystemObject #####

<name>.GetDateTime()</name>
<ret>DateTimeOffset</ret>
<param>[Double offset]</param>
<link>C3B81120</link>
<desc>Returns the current time with the specified hour offset.</desc>
<rem>For more info on the DateTime object, go to <a href=https://msdn.microsoft.com/en-us/library/system.datetime.aspx >https://msdn.microsoft.com/en-us/library/system.datetime.aspx</a>.</rem>


##### TemplexGenerator #####

<name>.BulletFeatures</name>
<ret>List`1</ret>
<link>19C5D5C1</link>
<desc>Generates product bullet points aggressively.</desc>
<rem>This is useful when a minimum number of bullet points absolutely neets to be met.</rem>


<name>.GetFullColorDescription()</name>
<ret>String</ret>
<param>[String separator]</param>
<link>845079DB</link>
<desc>Gets a full color description of a product, including trademark color and CNET standardized color, but avoiding repetition.</desc>


##### DigitalContent #####

<name>.BestImage</name>
<ret>DigitalContentItem</ret>
<link>E9E6D8AF</link>
<desc>Returns the best image for this product.</desc>


<name>.BestImages</name>
<ret>List`1</ret>
<link>3E946898</link>
<desc>Returns a list of images for this product sorted from best to worst.</desc>


<name>.BoxContents</name>
<ret>DigitalContentItem</ret>
<link>75512517</link>
<desc>Returns the (manufacturer's) list of box contents for this product.</desc>
<rem>Key selling points are in bullet form.</rem>


<name>.KeySellingPoints</name>
<ret>DigitalContentItem</ret>
<link>453939FE</link>
<desc>Returns the (manufacturer's) key selling points for this product.</desc>
<rem>Key selling points are in bullet form.</rem>


<name>.Ksp</name>
<ret>DigitalContentItem</ret>
<link>6067A2B2</link>
<desc>Same as KeySellingPoints</desc>


<name>.MarketingText</name>
<ret>DigitalContentItem</ret>
<link>51B4DADD</link>
<desc>Returns the (manufacturer's) marketing description for this product.</desc>


<name>.Msds</name>
<ret>DigitalContentItem</ret>
<link>39992759</link>
<desc>Returns the manufacturer's Material Safety Data Sheet for this product.</desc>


<name>.ProductFeatures</name>
<ret>DigitalContentItem</ret>
<link>260B9400</link>
<desc>Returns the (manufacturer's) product features for this product.</desc>
<rem>These are separated in paragraphs with headlines.</rem>


<name>.ProductSheet</name>
<ret>DigitalContentItem</ret>
<link>35D041D2</link>
<desc>Returns the manufacturer's product sheet for this product.</desc>


<name>.QuickStartGuide</name>
<ret>DigitalContentItem</ret>
<link>D5AA694F</link>
<desc>Returns the manufacturer's quick start guide for this product.</desc>


<name>.Thumbnail</name>
<ret>DigitalContentItem</ret>
<link>70C09C00</link>
<desc>Returns a thumbnail sized image that illustrates this product.</desc>


<name>.UserManual</name>
<ret>DigitalContentItem</ret>
<link>96EFA0BB</link>
<desc>Returns the manufacturer's user manual for this product.</desc>


##### DigitalContentItem #####

<name>.Description</name>
<ret>String</ret>
<link>4FE52986</link>
<desc>Return the description of this content.</desc>


<name>.MimeType</name>
<ret>String</ret>
<link>E2C8E80E</link>
<desc>Returns the MIME type of this content.</desc>


<name>.ToHtml()</name>
<ret>String</ret>
<link>7715F446</link>
<desc>Converts this content to HTML, essencially discarding CDATA tags.</desc>
<rem>Only works for MIME type "application/xml".</rem>


<name>.ToPlainText()</name>
<ret>String</ret>
<link>675ECBE0</link>
<desc>Converts this content to plain text.</desc>
<rem>Only works on Marketing Text, Key Selling Points or Product Features, and throws an exception for other types of content such as images.</rem>


<name>.Url</name>
<ret>Uri</ret>
<link>9480AB47</link>
<desc>Returns the Unified Resource Locator link to the source of this content.</desc>


<name>.XmlContent</name>
<ret>String</ret>
<link>E325AA14</link>
<desc>Returns this content in raw XML form.</desc>
<rem>Only works for MIME type "application/xml".</rem>


##### ExpressionResultList #####

<name>.Count</name>
<ret>ExpressionResult</ret>
<link>41BDD032</link>
<desc>Returns the number of elements in this list.</desc>


<name>.DiscardNulls()</name>
<ret>ExpressionResult</ret>
<link>E6B654F9</link>
<desc>Discards empty results from matched repeating attributes.</desc>


<name>.Distinct</name>
<ret>ExpressionResult</ret>
<link>3A0DB75D</link>
<desc>Returns a new list with all the elements from this list, removing duplicates.</desc>


<name>.Erase(<span class="tx-ref-code-string">&quot;value&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String value, [Boolean ignoreCase], [String literalFormat]</param>
<link>5346D257</link>
<desc>Returns the text value of each element without any occurrences of the specified text.</desc>


<name>.EraseTextSurroundedBy(<span class="tx-ref-code-string">&quot;surroundingCharacters&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String surroundingCharacters</param>
<link>76036BC3</link>
<desc>Returns the text value of each element without any text that is surrounded by the specified characters in the original string.</desc>
<rem>The parameters 'surroundingCharacters' must contain an even number of characters.</rem>


<name>.ExtractDecimals()</name>
<ret>ExpressionResult</ret>
<param>[Nullable`1 d]</param>
<link>838B4DFE</link>
<desc>Attempts to extract all the decimal numbers from the text value of each element.</desc>
<rem>This will return 0 on empty values, but will return nothing on non-empty text values that contain no decimals.</rem>


<name>.First()</name>
<ret>ExpressionResult</ret>
<link>A1C40A19</link>
<desc>Returns the first element from this list, null if list is empty.</desc>


<name>.Flatten()</name>
<ret>ExpressionResult</ret>
<param>[String separator]</param>
<link>C9A0856</link>
<desc>Converts to text and merges all the text in this list, inserting the specified separator between each element.</desc>


<name>.FlattenWithAnd()</name>
<ret>ExpressionResult</ret>
<param>[Int32 maxValues], [String omissionIndicator]</param>
<link>AE573DBD</link>
<desc>Converts to text and merges all the text in this list, with gramatically correct separators.</desc>


<name>.Format(<span class="tx-ref-code-string">&quot;literalFormat&quot;</span>)</name>
<ret>ExpressionResultList</ret>
<param>String literalFormat</param>
<link>3553A871</link>
<desc>Calls ToString() with the specified literalFormat on each element of this list, returning a list with the results.</desc>


<name>.HasText</name>
<ret>Boolean</ret>
<link>158D10EE</link>
<desc>Indicates whether the text value of each element contains any visible text.</desc>
<rem>This will return false for strings containing only blank characters such as whitespaces, tabs and line breaks.</rem>


<name>.HtmlEncode()</name>
<ret>ExpressionResult</ret>
<link>3618F7C4</link>
<desc>Encodes the content of the text value of each element so it can be safely placed within html tags.</desc>


<name>.IfLike(<span class="tx-ref-code-string">&quot;pattern&quot;</span>, <span class="tx-ref-code-string">&quot;replacement&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String pattern, String replacement</param>
<link>609D59C7</link>
<desc>Returns the specified replacement text if the text value of each element matches the specified pattern.</desc>
<rem>Pattern accepts % wildcards.</rem>


<name>.IfLongerThan(<span class="tx-ref-code-number">7</span>, <span class="tx-ref-code-string">&quot;replacementText&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>Int32 length, String replacementText</param>
<link>6B6B4981</link>
<desc>Returns the specified replacement text if the text value of each element is longer than the specified length, returns the original string otherwise.</desc>


<name>.IsEmpty</name>
<ret>Boolean</ret>
<link>94DF0C4</link>
<desc>Indicates whether the text value of each element is void of any visible text.</desc>
<rem>This will return true for strings containing text that is only blank characters such as whitespaces, tabs and line breaks.</rem>


<name>.Last()</name>
<ret>ExpressionResult</ret>
<link>DF3403B9</link>
<desc>Returns the last element from this list, null if list is empty.</desc>


<name>.Length</name>
<ret>Int32</ret>
<link>52CE121</link>
<desc>Indicates the number of characters in a String.</desc>


<name>.Max()</name>
<ret>ExpressionResult</ret>
<link>E312943</link>
<desc>Returns the element from this list which has the greatest value when converted to decimal.</desc>


<name>.Min()</name>
<ret>ExpressionResult</ret>
<link>D30FCCD9</link>
<desc>Returns the element from this list which has the smallest value when converted to decimal.</desc>


<name>.MinMax()</name>
<ret>ExpressionResult</ret>
<link>EF6F2FC9</link>
<desc>Returns a list containing the minimum and maximum decimal values.</desc>


<name>.Pluralize()</name>
<ret>ExpressionResult</ret>
<link>8AFC2CBB</link>
<desc>Returns the text value of each element in plural form.</desc>
<rem>English only.</rem>


<name>.Postfix(<span class="tx-ref-code-string">&quot;suffix&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String suffix</param>
<link>D5704B21</link>
<desc>Returns the text value of each element postfixed with the specified text.</desc>


<name>.Prefix(<span class="tx-ref-code-string">&quot;prefix&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String prefix</param>
<link>77F79EC6</link>
<desc>Returns the text value of each element prefixed with the specified text.</desc>


<name>.RegexReplace(<span class="tx-ref-code-string">&quot;pattern&quot;</span>, <span class="tx-ref-code-string">&quot;substitution&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String pattern, String substitution</param>
<link>7AB0B482</link>
<desc>Returns the text value of each element in which all text that matches the specified regular expression has been replaced by the specified replacement text.</desc>
<rem>Ask Luis if you suspect you need to use this.</rem>


<name>.Replace(<span class="tx-ref-code-string">&quot;oldValue&quot;</span>, <span class="tx-ref-code-string">&quot;newValue&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String oldValue, String newValue, [String literalFormat], [StringComparison stringComparison]</param>
<link>F887535C</link>
<desc>Returns the text value of each element in which all occurrences of the specified text have been replaced by the specified replacement text.</desc>
<rem>StringComparison options specify the culture, case, and sort rules to be used when matching two strings or parts of strings.</rem>


<name>.Shorten(<span class="tx-ref-code-number">1</span>)</name>
<ret>ExpressionResult</ret>
<param>Int32 length, [String omissionIndicator], [String literalFormat]</param>
<link>9F1E8D4C</link>
<desc>Returns a version of the text value of each element truncated to fit the specified number of characters, appending the specified omission indicator.</desc>
<rem>This will truncate at the nearest point, prioritizing paragraphs, line breaks and word breaks, in that order.</rem>


<name>.Skip(<span class="tx-ref-code-number">1</span>)</name>
<ret>ExpressionResultList</ret>
<param>Int32 count</param>
<link>864BDE08</link>
<desc>Returns all elements from this list, discarding the first specified number of elements.</desc>


<name>.Split(<span class="tx-ref-code-string">&quot;separator1&quot;</span>,             <span class="tx-ref-code-string">&quot;separator2&quot;</span>, ...)</name>
<ret>ExpressionResult</ret>
<param>String[] separator</param>
<link>7F71A789</link>
<desc>Returns a list of strings after splitting the text value of each element at every occurrence of the specified separator(s).</desc>


<name>.Sum()</name>
<ret>ExpressionResult</ret>
<link>E0D98372</link>
<desc>Returns the sum of all elements in this list when converted to decimals.</desc>


<name>.Take(<span class="tx-ref-code-number">7</span>)</name>
<ret>ExpressionResultList</ret>
<param>Int32 count</param>
<link>1410F698</link>
<desc>Returns the first specified number of elements from this list.</desc>


<name>.ToLower()</name>
<ret>ExpressionResult</ret>
<param>[Boolean preserveAcronyms]</param>
<link>5FD55B13</link>
<desc>Returns the text value of each element converted to 'lowercase'.</desc>


<name>.ToLowerFirstChar()</name>
<ret>ExpressionResult</ret>
<link>5C3C707D</link>
<desc>Returns the text value of each element with the first letter in lower case.</desc>
<rem>This will not lower the case of the first letter if the second letter is upper case.</rem>


<name>.ToText(<span class="tx-ref-code-string">&quot;literalFormat&quot;</span>)</name>
<ret>String</ret>
<param>String literalFormat</param>
<link>CFB4AF3C</link>
<desc>Returns a text representation of the text value of each element, and accepts formatting options</desc>
<rem>Formatting options include the ones described <a href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx">here</a></rem>


<name>.ToTitleCase()</name>
<ret>ExpressionResult</ret>
<param>[Int32 maxLength]</param>
<link>52FEED6C</link>
<desc>Returns the text value of each element with every word's first letter in upper case.</desc>


<name>.ToUpper()</name>
<ret>ExpressionResult</ret>
<link>DC30DE3A</link>
<desc>Returns the text value of each element converted to 'UPPERCASE'.</desc>


<name>.ToUpperFirstChar()</name>
<ret>ExpressionResult</ret>
<link>1DCC89BC</link>
<desc>Returns the text value of each element with the first letter in upper case.</desc>
<rem>This will not capitalize a lower case first letter in a string containing an uppercase second letter, such as iPhone.</rem>


<name>.UseSeparators(<span class="tx-ref-code-string">&quot;separators1&quot;</span>,             <span class="tx-ref-code-string">&quot;separators2&quot;</span>, ...)</name>
<ret>ExpressionResult</ret>
<param>String[] separators</param>
<link>971A2448</link>
<desc>Replaces the counting separator ¬ with the specified respective separator</desc>
<rem>You may specify only the first few separators and whitespace will automatically be used for the remaining values, you can also specify no separators, and whitespace will be used for all values.</rem>


<name>.Where(<span class="tx-ref-code-string">&quot;pattern1&quot;</span>,             <span class="tx-ref-code-string">&quot;pattern2&quot;</span>, ...)</name>
<ret>ExpressionResultList</ret>
<param>String[] pattern</param>
<link>67715C38</link>
<desc>Returns a new list with all the elements from this list that match any the specified pattern(s).</desc>
<rem>Pattern accepts % wildcards.</rem>


<name>.WhereNot(<span class="tx-ref-code-string">&quot;pattern1&quot;</span>,             <span class="tx-ref-code-string">&quot;pattern2&quot;</span>, ...)</name>
<ret>ExpressionResultList</ret>
<param>String[] pattern</param>
<link>F4725E33</link>
<desc>Returns a new list with all the elements from this that do not match any the specified pattern(s).</desc>
<rem>Pattern accepts % wildcards.</rem>


##### ExpressionResultLiteral #####

<name>.Erase(<span class="tx-ref-code-string">&quot;value&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String value, [Boolean ignoreCase], [String literalFormat]</param>
<link>F70F1CA8</link>
<desc>Returns this string without any occurrences of the specified text.</desc>


<name>.EraseTextSurroundedBy(<span class="tx-ref-code-string">&quot;surroundingCharacters&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String surroundingCharacters</param>
<link>10138ADC</link>
<desc>Returns this string without any text that is surrounded by the specified characters in the original string.</desc>
<rem>The parameters 'surroundingCharacters' must contain an even number of characters.</rem>


<name>.ExtractDecimals()</name>
<ret>ExpressionResult</ret>
<param>[Nullable`1 d]</param>
<link>FE963FC1</link>
<desc>Attempts to extract all the decimal numbers from this string.</desc>
<rem>This will return 0 on empty values, but will return nothing on non-empty text values that contain no decimals.</rem>


<name>.HasText</name>
<ret>Boolean</ret>
<link>B260577F</link>
<desc>Indicates whether this string contains any visible text.</desc>
<rem>This will return false for strings containing only blank characters such as whitespaces, tabs and line breaks.</rem>


<name>.HtmlEncode()</name>
<ret>ExpressionResult</ret>
<link>C675EAA3</link>
<desc>Encodes the content of this string so it can be safely placed within html tags.</desc>


<name>.IfLike(<span class="tx-ref-code-string">&quot;pattern&quot;</span>, <span class="tx-ref-code-string">&quot;replacement&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String pattern, String replacement</param>
<link>C29B0648</link>
<desc>Returns the specified replacement text if this string matches the specified pattern.</desc>
<rem>Pattern accepts % wildcards.</rem>


<name>.IfLongerThan(<span class="tx-ref-code-number">3</span>, <span class="tx-ref-code-string">&quot;replacementText&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>Int32 length, String replacementText</param>
<link>BF800A34</link>
<desc>Returns the specified replacement text if this string is longer than the specified length, returns the original string otherwise.</desc>


<name>.IsEmpty</name>
<ret>Boolean</ret>
<link>33CC8613</link>
<desc>Indicates whether this string is void of any visible text.</desc>
<rem>This will return true for strings containing text that is only blank characters such as whitespaces, tabs and line breaks.</rem>


<name>.Length</name>
<ret>Int32</ret>
<link>63331E60</link>
<desc>Indicates the number of characters in a String.</desc>


<name>.Pluralize()</name>
<ret>ExpressionResult</ret>
<link>6854C7EE</link>
<desc>Returns this string in plural form.</desc>
<rem>English only.</rem>


<name>.Postfix(<span class="tx-ref-code-string">&quot;suffix&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String suffix</param>
<link>D3631ACA</link>
<desc>Returns this string postfixed with the specified text.</desc>


<name>.Prefix(<span class="tx-ref-code-string">&quot;prefix&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String prefix</param>
<link>15F52559</link>
<desc>Returns this string prefixed with the specified text.</desc>


<name>.RegexReplace(<span class="tx-ref-code-string">&quot;pattern&quot;</span>, <span class="tx-ref-code-string">&quot;substitution&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String pattern, String substitution</param>
<link>EDEA13D5</link>
<desc>Returns this string in which all text that matches the specified regular expression has been replaced by the specified replacement text.</desc>
<rem>Ask Luis if you suspect you need to use this.</rem>


<name>.Replace(<span class="tx-ref-code-string">&quot;oldValue&quot;</span>, <span class="tx-ref-code-string">&quot;newValue&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String oldValue, String newValue, [String literalFormat], [StringComparison stringComparison]</param>
<link>B6B85949</link>
<desc>Returns this string in which all occurrences of the specified text have been replaced by the specified replacement text.</desc>
<rem>StringComparison options specify the culture, case, and sort rules to be used when matching two strings or parts of strings.</rem>


<name>.Shorten(<span class="tx-ref-code-number">8</span>)</name>
<ret>ExpressionResult</ret>
<param>Int32 length, [String omissionIndicator], [String literalFormat]</param>
<link>1BB188FB</link>
<desc>Returns a version of this string truncated to fit the specified number of characters, appending the specified omission indicator.</desc>
<rem>This will truncate at the nearest point, prioritizing paragraphs, line breaks and word breaks, in that order.</rem>


<name>.Split(<span class="tx-ref-code-string">&quot;separator1&quot;</span>,             <span class="tx-ref-code-string">&quot;separator2&quot;</span>, ...)</name>
<ret>ExpressionResult</ret>
<param>String[] separator</param>
<link>1B646BE6</link>
<desc>Returns a list of strings after splitting this string at every occurrence of the specified separator(s).</desc>


<name>.ToLower()</name>
<ret>ExpressionResult</ret>
<param>[Boolean preserveAcronyms]</param>
<link>F3F7FFD6</link>
<desc>Returns this string converted to 'lowercase'.</desc>


<name>.ToLowerFirstChar()</name>
<ret>ExpressionResult</ret>
<link>DABC1E90</link>
<desc>Returns this string with the first letter in lower case.</desc>
<rem>This will not lower the case of the first letter if the second letter is upper case.</rem>


<name>.ToText(<span class="tx-ref-code-string">&quot;literalFormat&quot;</span>)</name>
<ret>String</ret>
<param>String literalFormat</param>
<link>3B4B7582</link>
<desc>Returns a text representation of this string, and accepts formatting options</desc>
<rem>Formatting options include the ones described <a href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx">here</a></rem>


<name>.ToTitleCase()</name>
<ret>ExpressionResult</ret>
<param>[Int32 maxLength]</param>
<link>20EA4C99</link>
<desc>Returns this string with every word's first letter in upper case.</desc>


<name>.ToUpper()</name>
<ret>ExpressionResult</ret>
<link>87222701</link>
<desc>Returns this string converted to 'UPPERCASE'.</desc>


<name>.ToUpperFirstChar()</name>
<ret>ExpressionResult</ret>
<link>2A047B8B</link>
<desc>Returns this string with the first letter in upper case.</desc>
<rem>This will not capitalize a lower case first letter in a string containing an uppercase second letter, such as iPhone.</rem>


##### ExpressionResultNumeric #####

<name>.AtLeast(<span>minimum</span>)</name>
<ret>Nullable`1</ret>
<param>Decimal minimum</param>
<link>E92BD858</link>
<desc>Returns this numeric value or the specified minimum value, whichever is greater.</desc>


<name>.AtMost(<span>maximum</span>)</name>
<ret>Nullable`1</ret>
<param>Decimal maximum</param>
<link>79D3618</link>
<desc>Returns this numeric value or the specified maximum value, whichever is smaller.</desc>


<name>.Erase(<span class="tx-ref-code-string">&quot;value&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String value, [Boolean ignoreCase], [String literalFormat]</param>
<link>FD640D78</link>
<desc>Returns this numeric value without any occurrences of the specified text.</desc>


<name>.EraseTextSurroundedBy(<span class="tx-ref-code-string">&quot;surroundingCharacters&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String surroundingCharacters</param>
<link>4C48422C</link>
<desc>Returns this numeric value without any text that is surrounded by the specified characters in the original string.</desc>
<rem>The parameters 'surroundingCharacters' must contain an even number of characters.</rem>


<name>.ExtractDecimals()</name>
<ret>ExpressionResult</ret>
<param>[Nullable`1 d]</param>
<link>CA17C051</link>
<desc>Attempts to extract all the decimal numbers from this numeric value.</desc>
<rem>This will return 0 on empty values, but will return nothing on non-empty text values that contain no decimals.</rem>


<name>.HasText</name>
<ret>Boolean</ret>
<link>A9ABF4F</link>
<desc>Indicates whether this numeric value contains any visible text.</desc>
<rem>This will return false for strings containing only blank characters such as whitespaces, tabs and line breaks.</rem>


<name>.HtmlEncode()</name>
<ret>ExpressionResult</ret>
<link>F7511A3B</link>
<desc>Encodes the content of this numeric value so it can be safely placed within html tags.</desc>


<name>.IfLike(<span class="tx-ref-code-string">&quot;pattern&quot;</span>, <span class="tx-ref-code-string">&quot;replacement&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String pattern, String replacement</param>
<link>65E2BAD8</link>
<desc>Returns the specified replacement text if this numeric value matches the specified pattern.</desc>
<rem>Pattern accepts % wildcards.</rem>


<name>.IfLongerThan(<span class="tx-ref-code-number">4</span>, <span class="tx-ref-code-string">&quot;replacementText&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>Int32 length, String replacementText</param>
<link>BAAF1124</link>
<desc>Returns the specified replacement text if this numeric value is longer than the specified length, returns the original string otherwise.</desc>


<name>.IsEmpty</name>
<ret>Boolean</ret>
<link>3708B383</link>
<desc>Indicates whether this numeric value is void of any visible text.</desc>
<rem>This will return true for strings containing text that is only blank characters such as whitespaces, tabs and line breaks.</rem>


<name>.Length</name>
<ret>Int32</ret>
<link>95A881D0</link>
<desc>Indicates the number of characters in a String.</desc>


<name>.MultiplyBy(<span>factor</span>)</name>
<ret>Nullable`1</ret>
<param>Decimal factor</param>
<link>24F2CAE3</link>
<desc>Returns the result of multiplying this numeric value with the specified factor.</desc>


<name>.Pluralize()</name>
<ret>ExpressionResult</ret>
<link>6C479D66</link>
<desc>Returns this numeric value in plural form.</desc>
<rem>English only.</rem>


<name>.Postfix(<span class="tx-ref-code-string">&quot;suffix&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String suffix</param>
<link>F48A3032</link>
<desc>Returns this numeric value postfixed with the specified text.</desc>


<name>.Prefix(<span class="tx-ref-code-string">&quot;prefix&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String prefix</param>
<link>5612C649</link>
<desc>Returns this numeric value prefixed with the specified text.</desc>


<name>.RegexReplace(<span class="tx-ref-code-string">&quot;pattern&quot;</span>, <span class="tx-ref-code-string">&quot;substitution&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String pattern, String substitution</param>
<link>FB57E68D</link>
<desc>Returns this numeric value in which all text that matches the specified regular expression has been replaced by the specified replacement text.</desc>
<rem>Ask Luis if you suspect you need to use this.</rem>


<name>.Replace(<span class="tx-ref-code-string">&quot;oldValue&quot;</span>, <span class="tx-ref-code-string">&quot;newValue&quot;</span>)</name>
<ret>ExpressionResult</ret>
<param>String oldValue, String newValue, [String literalFormat], [StringComparison stringComparison]</param>
<link>9DC09359</link>
<desc>Returns this numeric value in which all occurrences of the specified text have been replaced by the specified replacement text.</desc>
<rem>StringComparison options specify the culture, case, and sort rules to be used when matching two strings or parts of strings.</rem>


<name>.Round()</name>
<ret>Nullable`1</ret>
<link>52E45B5D</link>
<desc>Returns this numeric value rounded to the nearest integer value.</desc>


<name>.Shorten(<span class="tx-ref-code-number">8</span>)</name>
<ret>ExpressionResult</ret>
<param>Int32 length, [String omissionIndicator], [String literalFormat]</param>
<link>BDEC9F43</link>
<desc>Returns a version of this numeric value truncated to fit the specified number of characters, appending the specified omission indicator.</desc>
<rem>This will truncate at the nearest point, prioritizing paragraphs, line breaks and word breaks, in that order.</rem>


<name>.Split(<span class="tx-ref-code-string">&quot;separator1&quot;</span>,             <span class="tx-ref-code-string">&quot;separator2&quot;</span>, ...)</name>
<ret>ExpressionResult</ret>
<param>String[] separator</param>
<link>E87C9F76</link>
<desc>Returns a list of strings after splitting this numeric value at every occurrence of the specified separator(s).</desc>


<name>.ToLower()</name>
<ret>ExpressionResult</ret>
<param>[Boolean preserveAcronyms]</param>
<link>E9633646</link>
<desc>Returns this numeric value converted to 'lowercase'.</desc>


<name>.ToLowerFirstChar()</name>
<ret>ExpressionResult</ret>
<link>5276FDA8</link>
<desc>Returns this numeric value with the first letter in lower case.</desc>
<rem>This will not lower the case of the first letter if the second letter is upper case.</rem>


<name>.ToText(<span class="tx-ref-code-string">&quot;literalFormat&quot;</span>)</name>
<ret>String</ret>
<param>String literalFormat</param>
<link>B96F8382</link>
<desc>Returns a text representation of this numeric value, and accepts formatting options</desc>
<rem>Formatting options include the ones described <a href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx">here</a></rem>


<name>.ToTitleCase()</name>
<ret>ExpressionResult</ret>
<param>[Int32 maxLength]</param>
<link>EE505329</link>
<desc>Returns this numeric value with every word's first letter in upper case.</desc>


<name>.ToUpper()</name>
<ret>ExpressionResult</ret>
<link>4C567C99</link>
<desc>Returns this numeric value converted to 'UPPERCASE'.</desc>


<name>.ToUpperFirstChar()</name>
<ret>ExpressionResult</ret>
<link>958A4673</link>
<desc>Returns this numeric value with the first letter in upper case.</desc>
<rem>This will not capitalize a lower case first letter in a string containing an uppercase second letter, such as iPhone.</rem>


##### PdmAttribute #####

<name>.GroupName</name>
<ret>String</ret>
<link>47DF78C8</link>
<desc>Returns the name of the attribute group this attribute belongs to.</desc>
<rem>This should generally not be exported.</rem>


<name>.Invariant</name>
<ret>String</ret>
<link>4B3FD3C8</link>
<desc>Returns the invariant (english) value of this attribute.</desc>
<rem>Use this when testing the value in an expression.</rem>


<name>.InvariantUnit</name>
<ret>String</ret>
<link>6476FAD6</link>
<desc>Returns the invariant (english) unit of this attribute.</desc>
<rem>Use this when testing the unit in an expression.</rem>


<name>.Name</name>
<ret>String</ret>
<link>23D808B</link>
<desc>Returns the name of this attribute.</desc>
<rem>This should generally not be exported.</rem>


<name>.Unit</name>
<ret>String</ret>
<link>4C4A8CE</link>
<desc>Returns the unit of this attribute, if any.</desc>
<rem>Prefer this when exporting a unit.</rem>


<name>.UnitUSM</name>
<ret>String</ret>
<link>F622ECE5</link>
<desc>Returns the unit of this attribute, if any, in US metrics.</desc>
<rem>Prefer this when exporting a unit in US metrics.</rem>


##### PdmAttributeSet #####

<name>.Value</name>
<ret>String</ret>
<link>83E284C7</link>
<desc>Returns the value of this attribute</desc>
<rem>Prefer this when exporting a value.</rem>


<name>.ValueUSM</name>
<ret>String</ret>
<link>FDE562F0</link>
<desc>Returns the value of this attribute in US metrics.</desc>
<rem>Prefer this when exporting a value in US metrics.</rem>


<name>.InvariantValues</name>
<ret>ExpressionResultList</ret>
<link>F71DBED2</link>
<desc>Returns an ExpressionResultList object containing all the invariant values in this attribute grouping.</desc>
<rem>Values are separated by ¬ according to their index, i.e. value1¬value2¬¬value3</rem>


<name>.ListUSM()</name>
<ret>String</ret>
<param>[String innerSeparator], [String outerSeparator]</param>
<link>EC5E855D</link>
<desc>This will list the values of this attribute grouping in US metrics using the specified inner and outer separators.</desc>


<name>.Values</name>
<ret>ExpressionResultList</ret>
<link>AC1055E6</link>
<desc>Returns an ExpressionResultList object containing all the values in this attribute grouping.</desc>
<rem>Values are separated by ¬ according to their index, i.e. value1¬value2¬¬value3</rem>


<name>.ValuesUSM</name>
<ret>ExpressionResultList</ret>
<link>355FFFAB</link>
<desc>Returns an ExpressionResultList object containing all the USM values in this attribute grouping.</desc>
<rem>Values are separated by ¬ according to their index, i.e. value1¬value2¬¬value3</rem>


##### PdmMultivalueAttribute #####

<name>.Count</name>
<ret>Decimal</ret>
<link>923E11A3</link>
<desc>Returns the number of values in this this multi-valued attribute.</desc>
<rem>This returns 1 if this contains a single value, 2 if this contains two values, etc...</rem>


<name>.GroupName</name>
<ret>String</ret>
<link>9D9D036A</link>
<desc>Returns the name of the attribute group this multi-valued attribute belongs to.</desc>
<rem>This should generally not be exported.</rem>


<name>.Invariant</name>
<ret>String</ret>
<link>115B26A</link>
<desc>Returns the invariant (english) value of this multi-valued attribute.</desc>
<rem>Use this when testing the value in an expression.</rem>


<name>.InvariantUnit</name>
<ret>String</ret>
<link>D3039C9C</link>
<desc>Returns the invariant (english) unit of this multi-valued attribute.</desc>
<rem>Use this when testing the unit in an expression.</rem>


<name>.InvariantValues</name>
<ret>ExpressionResultList</ret>
<link>788105AA</link>
<desc>Returns an ExpressionResultList object containing all the invariant values in this multi-valued attribute.</desc>


<name>.Name</name>
<ret>String</ret>
<link>9FC759D</link>
<desc>Returns the name of this multi-valued attribute.</desc>
<rem>This should generally not be exported.</rem>


<name>.Total</name>
<ret>Decimal</ret>
<link>5B547412</link>
<desc>Returns the result of adding all the numeric values in this multi-valued attribute.</desc>


<name>.Unit</name>
<ret>String</ret>
<link>C1443DDC</link>
<desc>Returns the unit of this multi-valued attribute, if any.</desc>
<rem>Prefer this when exporting a unit.</rem>


<name>.UnitUSM</name>
<ret>String</ret>
<link>9C73BC6F</link>
<desc>Returns the unit of this multi-valued attribute, if any, in US metrics.</desc>
<rem>Prefer this when exporting a unit in US metrics.</rem>


<name>.Value</name>
<ret>String</ret>
<link>D18A0495</link>
<desc>Returns the value of this multi-valued attribute</desc>
<rem>Prefer this when exporting a value.</rem>


<name>.Values</name>
<ret>ExpressionResultList</ret>
<link>B00218DE</link>
<desc>Returns an ExpressionResultList object containing all the values in this multi-valued attribute.</desc>
<rem>In case of numeric attributes, it returns a list of decimals, use .ValuesWithUnits for a list of text containing units</rem>


<name>.ValuesAndUnits</name>
<ret>ExpressionResultList</ret>
<link>AA7B5E66</link>
<desc>Returns an ExpressionResultList object containing all the values together with units in this multi-valued attribute.</desc>
<rem>In case of numeric attributes, it returns a list of decimals, use .ValuesWithUnits for a list of text containing units</rem>


<name>.ValuesAndUnitsUSM</name>
<ret>ExpressionResultList</ret>
<link>2FEED265</link>
<desc>Returns an ExpressionResultList object containing all the USM values together with units in this multi-valued attribute.</desc>
<rem>In case of numeric attributes, it returns a list of decimals, use .ValuesWithUnits for a list of text containing units</rem>


<name>.ValuesUSM</name>
<ret>ExpressionResultList</ret>
<link>D9EB16F</link>
<desc>Returns an ExpressionResultList object containing all the USM values in this multi-valued attribute.</desc>
<rem>Use .ValuesWithUnitsUsm for a list of text containing units</rem>


<name>.ValueUSM</name>
<ret>String</ret>
<link>93F724BA</link>
<desc>Returns the value of this attribute in US metrics.</desc>
<rem>Prefer this when exporting a value in US metrics.</rem>


<name>.Where(<span class="tx-ref-code-string">&quot;filter1&quot;</span>,             <span class="tx-ref-code-string">&quot;filter2&quot;</span>, ...)</name>
<ret>PdmMultivalueAttribute</ret>
<param>String[] filter</param>
<link>1A106BD1</link>
<desc>Returns a subset of the values in this multi-valued attribute containing only the ones whose english values directly match one of the specified patterns.</desc>
<rem>Supports % wildcards.</rem>


<name>.WhereNot(<span class="tx-ref-code-string">&quot;filter1&quot;</span>,             <span class="tx-ref-code-string">&quot;filter2&quot;</span>, ...)</name>
<ret>PdmMultivalueAttribute</ret>
<param>String[] filter</param>
<link>F0C915A2</link>
<desc>Returns a subset of the values in this multi-valued attribute containing only the ones whose english values do NOT match one of the specified patterns.</desc>
<rem>Supports % wildcards.</rem>


##### PdmRepeatingAttribute #####

<name>.Count</name>
<ret>Decimal</ret>
<link>41894ABE</link>
<desc>Returns the number of values in this this repeating attribute.</desc>
<rem>This returns 1 if this contains a single value, 2 if this contains two values, etc...</rem>


<name>.GroupName</name>
<ret>String</ret>
<link>5BE917B7</link>
<desc>Returns the name of the attribute group this repeating attribute belongs to.</desc>
<rem>This should generally not be exported.</rem>


<name>.Invariant</name>
<ret>String</ret>
<link>2E780ABF</link>
<desc>Returns the invariant (english) value of this repeating attribute.</desc>
<rem>Use this when testing the value in an expression.</rem>


<name>.InvariantUnit</name>
<ret>String</ret>
<link>4D9C01A5</link>
<desc>Returns the invariant (english) unit of this repeating attribute.</desc>
<rem>Use this when testing the unit in an expression.</rem>


<name>.InvariantValues</name>
<ret>ExpressionResultList</ret>
<link>5EC944C9</link>
<desc>Returns an ExpressionResultList object containing all the invariant values in this repeating attribute.</desc>


<name>.Match()</name>
<ret>PdmAttributeSet</ret>
<link>5FB41BB7</link>
<desc>Returns a grouping of attributes by matching this repeating attribute with all other repeating attribute in the same group.</desc>


<name>.Match(<span class="tx-ref-code-number">7</span>,             <span class="tx-ref-code-number">4</span>, ...)</name>
<ret>PdmAttributeSet</ret>
<param>Int32[] id</param>
<link>C8D3516A</link>
<desc>Returns a grouping of attributes by matching all the specified attribute ids, in the order they are provided.</desc>
<rem>This only works if all attributes are in this group of attributes.</rem>


<name>.Match(<span class="tx-ref-code-number">4</span>)</name>
<ret>PdmMultivalueAttribute</ret>
<param>Int32 attributeId</param>
<link>97B3A809</link>
<desc>Returns a grouping of attributes by matching this repeating attribute with another repeating attribute identified by the specified attribute id.</desc>
<rem>This only works if both attributes are in the same group.</rem>


<name>.Name</name>
<ret>String</ret>
<link>6FBBAC80</link>
<desc>Returns the name of this repeating attribute.</desc>
<rem>This should generally not be exported.</rem>


<name>.Total</name>
<ret>Decimal</ret>
<link>AB061717</link>
<desc>Returns the result of adding all the numeric values in this repeating attribute.</desc>


<name>.Unit</name>
<ret>String</ret>
<link>E297379</link>
<desc>Returns the unit of this repeating attribute, if any.</desc>
<rem>Prefer this when exporting a unit.</rem>


<name>.UnitUSM</name>
<ret>String</ret>
<link>FD9EFBDA</link>
<desc>Returns the unit of this repeating attribute, if any, in US metrics.</desc>
<rem>Prefer this when exporting a unit in US metrics.</rem>


<name>.Value</name>
<ret>String</ret>
<link>33741C76</link>
<desc>Returns the value of this repeating attribute</desc>
<rem>Prefer this when exporting a value.</rem>


<name>.Values</name>
<ret>ExpressionResultList</ret>
<link>B68E3EC1</link>
<desc>Returns an ExpressionResultList object containing all the values in this repeating attribute.</desc>
<rem>In case of numeric attributes, it returns a list of decimals, use .ValuesWithUnits for a list of text containing units</rem>


<name>.ValuesAndUnits</name>
<ret>ExpressionResultList</ret>
<link>2A1497AF</link>
<desc>Returns an ExpressionResultList object containing all the values together with units in this repeating attribute.</desc>
<rem>In case of numeric attributes, it returns a list of decimals, use .ValuesWithUnits for a list of text containing units</rem>


<name>.ValuesAndUnitsUSM</name>
<ret>ExpressionResultList</ret>
<link>A3ABB564</link>
<desc>Returns an ExpressionResultList object containing all the USM values together with units in this repeating attribute.</desc>
<rem>In case of numeric attributes, it returns a list of decimals, use .ValuesWithUnits for a list of text containing units</rem>


<name>.ValuesUSM</name>
<ret>ExpressionResultList</ret>
<link>E63BF6A4</link>
<desc>Returns an ExpressionResultList object containing all the USM values in this repeating attribute.</desc>
<rem>Use .ValuesWithUnitsUsm for a list of text containing units</rem>


<name>.ValueUSM</name>
<ret>String</ret>
<link>C918C1BB</link>
<desc>Returns the value of this attribute in US metrics.</desc>
<rem>Prefer this when exporting a value in US metrics.</rem>


<name>.Where(<span class="tx-ref-code-string">&quot;filter1&quot;</span>,             <span class="tx-ref-code-string">&quot;filter2&quot;</span>, ...)</name>
<ret>PdmMultivalueAttribute</ret>
<param>String[] filter</param>
<link>1ECFEEEE</link>
<desc>Returns a subset of the values in this repeating attribute containing only the ones whose english values directly match one of the specified patterns.</desc>
<rem>Supports % wildcards.</rem>


<name>.WhereNot(<span class="tx-ref-code-string">&quot;filter1&quot;</span>,             <span class="tx-ref-code-string">&quot;filter2&quot;</span>, ...)</name>
<ret>PdmMultivalueAttribute</ret>
<param>String[] filter</param>
<link>78B8B89</link>
<desc>Returns a subset of the values in this repeating attribute containing only the ones whose english values do NOT match one of the specified patterns.</desc>
<rem>Supports % wildcards.</rem>


<name>.WhereUnit(<span class="tx-ref-code-string">&quot;unitFilter1&quot;</span>,             <span class="tx-ref-code-string">&quot;unitFilter2&quot;</span>, ...)</name>
<ret>PdmMultivalueAttribute</ret>
<param>String[] unitFilter</param>
<link>D19F5B93</link>
<desc>Returns a subset of the values in this repeating attribute containing only the ones where the units match one of the specified patterns.</desc>
<rem>Supports % wildcards. This is NOT supported by multi-valued attributes. </rem>


<name>.WhereUnitOrValue(<span class="tx-ref-code-string">&quot;unitOrValueFilter1&quot;</span>,             <span class="tx-ref-code-string">&quot;unitOrValueFilter2&quot;</span>, ...)</name>
<ret>PdmMultivalueAttribute</ret>
<param>String[] unitOrValueFilter</param>
<link>B273550D</link>
<desc>Returns a subset of the values in this repeating attribute containing only the ones that either directly or indirectly (via units) match one of the specified patterns.</desc>
<rem>Ask Luis if you think you need to use this. Supports % wildcards. This is NOT supported by multi-valued attributes. </rem>


##### ProductCategories #####

<name>.AltCats</name>
<ret>IEnumerable`1</ret>
<link>7BCE01EA</link>
<desc>Returns a list of alternative categories for this product, the main being the first.</desc>


<name>.ListPaths()</name>
<ret>String</ret>
<param>[String separator]</param>
<link>34A1C97D</link>
<desc>Returns a string representation of this category with its full ancestry.</desc>


<name>.Main</name>
<ret>ProductCategory</ret>
<link>4041ED27</link>
<desc>Returns the main alternative category of this product.</desc>


##### RelatedProduct #####

<name>.Brand</name>
<ret>String</ret>
<link>88F40927</link>
<desc>Returns the brand of this product.</desc>


<name>.CategoryCode</name>
<ret>String</ret>
<link>CFCA5985</link>
<desc>Returns the category code of this product.</desc>


<name>.CategoryKey</name>
<ret>Int32</ret>
<link>8AAB489F</link>
<desc>Returns the category key of this product.</desc>


<name>.CustomerPn</name>
<ret>String</ret>
<link>B868C9B0</link>
<desc>Returns the customer partnumber of this product.</desc>
<rem>This may not always be available.</rem>


<name>.Manufacturer</name>
<ret>String</ret>
<link>B42CBA6B</link>
<desc>Returns the manufacturer name of this product.</desc>


<name>.ModelName</name>
<ret>String</ret>
<link>A4ECD0D6</link>
<desc>Returns the model name of this product.</desc>


<name>.PackQuantity</name>
<ret>Int32</ret>
<link>AFE21102</link>
<desc>Returns the pack quantity of this product.</desc>


<name>.PartNumber</name>
<ret>String</ret>
<link>C9E223C2</link>
<desc>Returns the partnumber of this product.</desc>


<name>.ProductId</name>
<ret>String</ret>
<link>2AAAAC26</link>
<desc>Returns the CNET identifier of this product.</desc>


<name>.ProductLine</name>
<ret>String</ret>
<link>34D2BB89</link>
<desc>Returns the product line of this product.</desc>


##### RelatedProductList #####

<name>.CategoryCodes</name>
<ret>IEnumerable`1</ret>
<link>43A0E92E</link>
<desc>Returns the category codes of these related products.</desc>


<name>.CategoryKeys</name>
<ret>IEnumerable`1</ret>
<link>C93D037E</link>
<desc>Returns the category keys of these related products.</desc>


<name>.CustomerPns</name>
<ret>IEnumerable`1</ret>
<link>C7D31285</link>
<desc>Returns the customer partnumbers of these related products, for the given customer id.</desc>


<name>.ManufacturerNames</name>
<ret>IEnumerable`1</ret>
<link>1EF2F53B</link>
<desc>Returns the manufacturer names of these related products.</desc>


<name>.ModelNames</name>
<ret>IEnumerable`1</ret>
<link>C8637F9B</link>
<desc>Returns the model names these related products.</desc>


<name>.ProductIds</name>
<ret>IEnumerable`1</ret>
<link>2C9AB411</link>
<desc>Returns the product Ids of these related products.</desc>


<name>.ProductLineNames</name>
<ret>IEnumerable`1</ret>
<link>17655365</link>
<desc>Returns the product lines of these related products.</desc>


<name>.ProductNames</name>
<ret>IEnumerable`1</ret>
<link>6903F1EB</link>
<desc>Returns the product names (product line + model name) of these related products.</desc>


<name>.WhereCategory(<span class="tx-ref-code-string">&quot;codeOrKey1&quot;</span>,             <span class="tx-ref-code-string">&quot;codeOrKey2&quot;</span>, ...)</name>
<ret>RelatedProductList</ret>
<param>String[] codeOrKey</param>
<link>5172D931</link>
<desc>Filter these related products for products of the specified category.</desc>
<rem>Supports both category code and category key.</rem>


<name>.WhereManufacturer(<span class="tx-ref-code-string">&quot;mfFilter1&quot;</span>,             <span class="tx-ref-code-string">&quot;mfFilter2&quot;</span>, ...)</name>
<ret>RelatedProductList</ret>
<param>String[] mfFilter</param>
<link>751D95E</link>
<desc>Filter these related products for products whose manufacturer's names match the specified pattern.</desc>
<rem>Supports % wildcards.</rem>


<name>.WhereModelName(<span class="tx-ref-code-string">&quot;modelFilter1&quot;</span>,             <span class="tx-ref-code-string">&quot;modelFilter2&quot;</span>, ...)</name>
<ret>RelatedProductList</ret>
<param>String[] modelFilter</param>
<link>2050711</link>
<desc>Filter these related products for products whose model names match the specified pattern.</desc>
<rem>Supports % wildcards.</rem>


<name>.WhereProductLine(<span class="tx-ref-code-string">&quot;plFilter1&quot;</span>,             <span class="tx-ref-code-string">&quot;plFilter2&quot;</span>, ...)</name>
<ret>RelatedProductList</ret>
<param>String[] plFilter</param>
<link>68EC48F2</link>
<desc>Filter these related products for products whose product lines match the specified pattern.</desc>
<rem>Supports % wildcards.</rem>


##### SpecLine #####

<name>.Body</name>
<ret>String</ret>
<link>454C3828</link>
<desc>Returns the body of this spec line.</desc>


<name>.Header</name>
<ret>String</ret>
<link>CE26311F</link>
<desc>Returns the header of this spec line.</desc>


<name>.Order</name>
<ret>Int32</ret>
<link>41F511CC</link>
<desc>Returns the ordinal position of this spec line.</desc>


##### Specs #####

<name>.GetLine(<span class="tx-ref-code-number">6</span>)</name>
<ret>ExpressionResult</ret>
<param>Int32 i</param>
<link>91335C02</link>
<desc>Returns the specified line of these specs.</desc>


<name>.GetLineBody(<span class="tx-ref-code-number">1</span>)</name>
<ret>ExpressionResult</ret>
<param>Int32 i</param>
<link>8AEFFDD2</link>
<desc>Returns the body of specified line of these specs.</desc>


<name>.GetLines()</name>
<ret>IEnumerable`1</ret>
<link>341A763B</link>
<desc>Returns the specified number of lines skipping the </desc>


<name>.LineCount</name>
<ret>Int32</ret>
<link>97871155</link>
<desc>Returns the number of lines in these specs.</desc>


##### SpecSection #####

<name>.Name</name>
<ret>String</ret>
<link>BC7E5027</link>
<desc>Returns the name of this section.</desc>